//
// ObjectDataSource.swift
// SPRKit
//
// Copyright (c) 2017 SPR Consulting <info@spr.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//

import Foundation


public enum ObjectDataSourceError: Error {
    case invalidIndexPath(IndexPath)
    case objectUnavailable(IndexPath)
}


/**
 The ObjectDataSource class provides an implementation-agnostic adapter for 
 managing object collections generated by underlying data storage technologies. 
 The ObjectDataSource API is designed for ease of use within 
 UICollectionViewDataSource and UITableViewDataSource implementations.
 
 The purpose of this adapter is to promote decoupling of UIViewControllers from
 the app's data storage technology. The app's middle tier should return 
 `ObjectDataSource` objects instead of storage-specific collection result 
 objects, such as `FMResultSet` (SQLite) or `NSFetchedResultsController` (Core 
 Data).
 
 Decoupling the the data storage technology from the app's UIViewController
 objects has proven useful for projects that require development to start
 before the service API or domain model contracts are defined and for projects
 that experience a significant change in service API or domain modeling that
 requires a different storage technology for performance or proper domain
 mapping. For example, apps using this protocol as part of decoupling data
 access tier are able to change their storage technologies between Core Data,
 SQLite, Realm.io, Cloudant CDTDatastore, or fixtured data without touching the
 code in UIViewControllers.
 
 This class defines the core API provided by all subclasses. This class is not 
 intended to be instantiated directly. Subclasses should override all of this 
 class's defined functions and should NOT call this class's implementation via 
 `super`.
 */
open class ObjectDataSource<T> {
    
    init() {}
    
    /**
     Returns the name of a section.
     
     - Parameter ofSection: A 0-based index identifying the section.
     
     - Returns: A string containing the name of the section, or `nil` if the
       section does not have a name.
     */
    open func name(ofSection section: Int) -> String? {
        return nil
    }
    
    /**
     Returns the number of objects (rows) in the section.
     
     - Parameter inSection: A 0-based index identifying the section.
     
     - Returns: A positive integer indicating the number of objects in the 
       specified section, or `0` if no objects are in the section.
     */
    open func numberOfObjects(inSection section: Int) -> Int {
        return 0
    }
    
    /**
     Returns the number of sections in this data source.
     
     - Returns: A positive integer indicating the number of section in this 
       data source, or `0` if there are no sections.
     */
    open func numberOfSections() -> Int {
        return 0
    }
    
    /**
     Returns the object at the given index path in the object list.
     
     - Parameter at: An IndexPath containing the section and row of the object 
       to be retrieved.
     
     - Throws: 
       - `ObjectDataSourceError.invalidIndexPath` if `indexPath` does not
         describe a valid index path in the data source.
       - `ObjectDataSourceError.objectUnavailable` if the specified object 
         could not be loaded from the underlying data storage for any reason.
     
     - Returns: The object at a given index path in the object list.
     */
    open func object(at indexPath: IndexPath) throws -> T {
        throw ObjectDataSourceError.invalidIndexPath(indexPath)
    }
    
}
